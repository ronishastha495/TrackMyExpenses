@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<div style="display: flex; height: 100vh;">
    <!-- Sidebar -->
    @if (!IsExcludedPage())
    {
        <div style="position: sticky; top: 0; width: 250px; height: 100vh; background-color: #2c3e50; color: white; overflow-y: auto; box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);">
            <NavMenu />
        </div>
    }

    <!-- Main Content -->
    <div style="flex: 1; overflow-y: auto; padding: 20px; background-color: #f9f9f9; box-sizing: border-box;">
        <main>
            @Body
        </main>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const toggler = document.querySelector('.navbar-toggler');
        const sidebar = document.querySelector('#sidebarMenu');

        if (toggler) {
            toggler.addEventListener('click', () => {
                sidebar.classList.toggle('show');
            });

            // Close sidebar when clicking outside on mobile
            document.addEventListener('click', (e) => {
                if (window.innerWidth < 992 && !sidebar.contains(e.target) && !toggler.contains(e.target)) {
                    sidebar.classList.remove('show');
                }
            });
        }
    });
</script>

@code {
    private bool IsExcludedPage()
    {
        // List of pages where the sidebar should not appear
        var excludedPages = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
        {
            "register",
            ""
        };

        // Get the current URI without query strings or trailing slashes
        var currentUri = NavigationManager.ToBaseRelativePath(NavigationManager.Uri).TrimEnd('/').ToLowerInvariant();

        Console.WriteLine($"Current URI: {currentUri}"); // Debugging

        // Check if the current page matches any excluded page
        return excludedPages.Contains(currentUri);
    }
}
