@page "/debt-payment"
@using TrackMyExpenses.Model
@using TrackMyExpenses.Services
@inject DebtService DebtService
@inject TransactionService TransactionService
@inject UserServices UserServices

<h3>Debt Payment</h3>

<!-- Display Debt List -->
@if (debts == null || !debts.Any())
{
    <div class="alert alert-info">
        No debts are available at the moment.
    </div>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Debt Source</th>
                <th scope="col">Amount</th>
                <th scope="col">Due Date</th>
                <th scope="col">Status</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var debt in debts)
            {
                <tr>
                    <td>@debt.Source</td>
                    <td>@debt.Amount</td>
                    <td>@debt.DueDate.ToShortDateString()</td>
                    <td>@(debt.IsCleared ? "Cleared" : "Outstanding")</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => SelectDebt(debt)">Make Payment</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (selectedDebt != null)
{
    <h4>Make Payment for @selectedDebt.Source</h4>
    <div class="mb-3">
        <label for="paymentAmount" class="form-label">Payment Amount</label>
        <input type="number" class="form-control" id="paymentAmount" @bind="paymentAmount" min="1" />
        <span style="font-size: 14px; color: #4a4a4a;">@UserServices.GetPreferredCurrency()</span> <!-- Display preferred currency here -->
    </div>
    <button class="btn btn-success" @onclick="MakePayment">Submit Payment</button>

    @if (!string.IsNullOrEmpty(paymentStatus))
    {
        <div class="alert alert-info mt-3" role="alert">
            @paymentStatus
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">
            @errorMessage
        </div>
    }
}

@code {
    private decimal TotalInflows { get; set; } = 0;
    private decimal TotalOutflows { get; set; } = 0;
    private decimal TotalDebts { get; set; } = 0;
    private decimal AvailableBalance { get; set; } = 0;
    private Transactions transaction = new Transactions();
    private string userName = string.Empty;
    private List<Debt> debts = new List<Debt>();
    private Debt selectedDebt;
    private decimal paymentAmount;
    private decimal availableCash;
    private string paymentStatus;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var loggedInUser = UserServices.GetLoggedInUser();

            if (loggedInUser == null)
            {
                throw new InvalidOperationException("User is not logged in.");
            }

            userName = loggedInUser.UserName;

            availableCash = await TransactionService.GetTotalBalanceForUserAsync(userName);

            List<Debt> modelDebts = await DebtService.LoadDebtsAsync(userName);
            debts = modelDebts.Select(d => new Debt
                {
                    debtId = d.debtId,
                    Source = d.Source,
                    Amount = d.Amount,
                    DueDate = d.DueDate,
                    IsCleared = d.IsCleared
                }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void SelectDebt(Debt debt)
    {
        selectedDebt = debt;
        paymentAmount = debt.Amount;
    }

    private async Task MakePayment()
    {
        // Clear previous messages
        errorMessage = null;

        if (selectedDebt == null || paymentAmount <= 0)
        {
            errorMessage = "Please select a debt and enter a valid payment amount.";
            return;
        }

        if (paymentAmount > availableCash)
        {
            errorMessage = "Insufficient funds.";
            return;
        }

        try
        {
            bool paymentSuccess = await DebtService.DebtPaymentAsync(userName, selectedDebt.debtId, paymentAmount, availableCash);

            if (paymentSuccess)
            {
                // Refresh available cash and debts list
                availableCash = await TransactionService.GetTotalInflowsForUserAsync(userName);
                debts = await DebtService.LoadDebtsAsync(userName);

                // Reset selected debt and payment amount after a brief delay
                await Task.Delay(2000);
                selectedDebt = null;
                paymentAmount = 0;

                // Re-render after state update
                StateHasChanged();
            }
            else
            {
                errorMessage = "Payment failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Debt Transactions: {ex.Message}";
        }
    }
}
