@page "/cash-out"
@using TrackMyExpenses.Model
@using TrackMyExpenses.Services

@inject TransactionService TransactionService
@inject UserServices UserServices

<div class="container my-5">
    <div class="card shadow-lg" style="background: linear-gradient(135deg, #f39c12, #e74c3c); border: none; border-radius: 15px; overflow: hidden;">
        <div class="card-header text-center text-white" style="background: rgba(0, 0, 0, 0.1);">
            <h3 class="fw-bold">Add Cash Out</h3>
        </div>
        <div class="card-body bg-white">
            <EditForm Model="@transaction" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <!-- Amount -->
                <div class="mb-3">
                    <label for="amount" class="form-label text-secondary fw-bold">Amount</label>
                    <InputNumber id="amount" @bind-Value="transaction.Amount" class="form-control" />
                    <small class="text-muted">@UserServices.GetPreferredCurrency()</small>
                </div>

                <!-- Transaction Date -->
                <div class="mb-3">
                    <label for="date" class="form-label text-secondary fw-bold">Transaction Date</label>
                    <input type="date" id="date" @bind="transaction.Date" class="form-control" />
                </div>

                <!-- Description -->
                <div class="mb-3">
                    <label for="description" class="form-label text-secondary fw-bold">Description</label>
                    <InputTextArea id="description" @bind-Value="transaction.Description" rows="3" class="form-control" />
                </div>

                <!-- Category -->
                <div class="mb-3">
                    <label for="category" class="form-label text-secondary fw-bold">Category</label>
                    <select id="category" @bind="transaction.Category" class="form-select">
                        <option value="debit">Debit</option>
                    </select>
                </div>

                <!-- Notes -->
                <div class="mb-3">
                    <label for="notes" class="form-label text-secondary fw-bold">Notes</label>
                    <InputTextArea id="notes" @bind-Value="transaction.Notes" rows="3" class="form-control" placeholder="Optional note about the transaction" />
                </div>

                <!-- Tags -->
                <div class="mb-3">
                    <label for="tags" class="form-label text-secondary fw-bold">Tags</label>
                    <InputText id="tags" @bind-Value="tagsInput" class="form-control" placeholder="Comma-separated tags" />
                </div>

                <!-- Submit Button -->
                <div class="text-center">
                    <button type="submit" class="btn btn-gradient text-white fw-bold px-4 py-2" style="background: linear-gradient(135deg, #f39c12, #e74c3c); border: none; border-radius: 25px;">
                        Submit
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (isMessageVisible)
{
    <div class="position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center" style="background-color: rgba(0, 0, 0, 0.5); z-index: 1050;">
        <div class="card shadow-lg" style="max-width: 500px; width: 90%; border: none; border-radius: 15px;">
            <div class="card-body text-center">
                <h4 class="text-warning fw-bold">@messageTitle</h4>
                <p class="text-muted">@messageContent</p>
                <button @onclick="CloseMessageBox" class="btn btn-gradient text-white fw-bold px-4 py-2" style="background: linear-gradient(135deg, #f39c12, #e74c3c); border: none; border-radius: 25px;">
                    Close
                </button>
            </div>
        </div>
    </div>
}

@code {
    private Transactions transaction = new Transactions
        {
            Date = DateTime.Today, // Initialize with today's date
            Category = "debit" // Default category
        };

    private string tagsInput = string.Empty;
    private string messageTitle = string.Empty;
    private string messageContent = string.Empty;
    private bool isMessageVisible = false;

    private async Task HandleSubmit()
    {
        try
        {
            var loggedInUser = UserServices.GetLoggedInUser();
            if (loggedInUser == null)
            {
                throw new InvalidOperationException("User is not logged in.");
            }

            transaction.UserName = loggedInUser.UserName;

            transaction.Tags = string.IsNullOrWhiteSpace(tagsInput)
                ? new List<string>()
                : tagsInput.Split(',').Select(tag => tag.Trim()).Where(tag => !string.IsNullOrEmpty(tag)).ToList();

            transaction.Id = Guid.NewGuid().ToString();

            await TransactionService.AddCashOutAsync(transaction);

            messageTitle = "Success!";
            messageContent = "Cash out transaction added successfully.";
            isMessageVisible = true;

            transaction = new Transactions { Date = DateTime.Today, Category = "debit" };
            tagsInput = string.Empty;
        }
        catch (Exception ex)
        {
            messageTitle = "Error!";
            messageContent = ex.Message;
            isMessageVisible = true;
        }
    }

    private void CloseMessageBox()
    {
        isMessageVisible = false;
    }
}
 