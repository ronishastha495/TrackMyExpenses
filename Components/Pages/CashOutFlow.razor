@page "/add-cash-out"
@using BudgetEase.Model
@using BudgetEase.Services

@inject TransactionService TransactionService

<h3>Add Cash Out</h3>

<EditForm Model="@transaction" OnValidSubmit="HandleSubmit"
          style="max-width: 600px; margin: 0 auto; background: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Amount -->
    <div style="margin-bottom: 16px;">
        <label for="amount" style="display: block; margin-bottom: 8px; font-size: 14px; font-weight: 600; color: #4a4a4a;">Amount</label>
        <InputNumber id="amount" @bind-Value="transaction.Amount"
                     style="width: 100%; padding: 10px 12px; border: 1px solid #d1d5db; border-radius: 4px; box-shadow: 0 1px 2px rgba(0,0,0,0.05); outline: none; font-size: 14px;" />
    </div>

    <!-- Transaction Date -->
    <div style="margin-bottom: 16px;">
        <label for="date" style="display: block; margin-bottom: 8px; font-size: 14px; font-weight: 600; color: #4a4a4a;">Transaction Date</label>
        <InputDate id="date" @bind-Value="transaction.Date"
                   style="width: 100%; padding: 10px 12px; border: 1px solid #d1d5db; border-radius: 4px; box-shadow: 0 1px 2px rgba(0,0,0,0.05); outline: none; font-size: 14px;" />
    </div>

    <!-- Description -->
    <div style="margin-bottom: 16px;">
        <label for="description" style="display: block; margin-bottom: 8px; font-size: 14px; font-weight: 600; color: #4a4a4a;">Description</label>
        <InputTextArea id="description" @bind-Value="transaction.Description" rows="3"
                       style="width: 100%; padding: 10px 12px; border: 1px solid #d1d5db; border-radius: 4px; box-shadow: 0 1px 2px rgba(0,0,0,0.05); outline: none; font-size: 14px;" />
    </div>


    <!-- Category -->
    <select id="category" @bind="transaction.Category"
            style="width: 100%; padding: 10px 12px; border: 1px solid #d1d5db; border-radius: 4px; box-shadow: 0 1px 2px rgba(0,0,0,0.05); outline: none; font-size: 14px;">
        <option value="debit">Debit</option>
        <!-- Add more categories as needed -->
    </select>


    <!-- Notes -->
    <div style="margin-bottom: 16px;">
        <label for="notes" style="display: block; margin-bottom: 8px; font-size: 14px; font-weight: 600; color: #4a4a4a;">Notes</label>
        <InputTextArea id="notes" @bind-Value="transaction.Notes" rows="2"
                       style="width: 100%; padding: 10px 12px; border: 1px solid #d1d5db; border-radius: 4px; box-shadow: 0 1px 2px rgba(0,0,0,0.05); outline: none; font-size: 14px;" />
    </div>

    <!-- Tags -->
    <div style="margin-bottom: 16px;">
        <label for="tags" style="display: block; margin-bottom: 8px; font-size: 14px; font-weight: 600; color: #4a4a4a;">Tags (Comma-Separated)</label>
        <InputText id="tags" @bind-Value="tagsInput"
                   style="width: 100%; padding: 10px 12px; border: 1px solid #d1d5db; border-radius: 4px; box-shadow: 0 1px 2px rgba(0,0,0,0.05); outline: none; font-size: 14px;" />
    </div>

    <!-- Submit Button -->
    <div style="text-align: center;">
        <button type="submit"
                style="padding: 10px 20px; background: #4f46e5; color: #ffffff; border: none; border-radius: 999px; font-size: 14px; cursor: pointer; transition: background 0.3s;">
            Submit
        </button>
    </div>
</EditForm>

@if (isMessageVisible)
{
    <div class="fixed top-0 left-0 w-full h-full bg-black bg-opacity-50 flex justify-center items-center z-50">
        <div class="bg-white p-6 rounded shadow-lg w-1/3 text-center">
            <h3 class="text-xl font-bold">@messageTitle</h3>
            <p>@messageContent</p>
            <button class="mt-4 px-6 py-2 bg-indigo-600 text-white rounded-full" @onclick="CloseMessageBox">Close</button>
        </div>
    </div>
}

@code {
    private Transactions transaction = new Transactions();
    // Initialize transaction in OnInitialized lifecycle method
    protected override void OnInitialized()
    {
        transaction = new Transactions
            {
                Category = "debit" // Set default category to "Debit"
            };
    }

    private string tagsInput = string.Empty;
    private string messageTitle = string.Empty;
    private string messageContent = string.Empty;
    private bool isMessageVisible = false;

    private async Task HandleSubmit()
    {
        try
        {
            // Parse tags from input
            transaction.Tags = string.IsNullOrWhiteSpace(tagsInput)
                ? new List<string>()
                : new List<string>(tagsInput.Split(',').Select(tag => tag.Trim()));

            transaction.Id = Guid.NewGuid().ToString(); // Generate unique ID
            transaction.TransactionType = "Outflow"; // Specify transaction type
                                                     // Add Notes only if provided
            if (string.IsNullOrWhiteSpace(transaction.Notes))
            {
                transaction.Notes = null;  // Leave Notes as null if it's empty
            }


            // Save transaction
            await TransactionService.AddTransactionAsync(transaction);

            // Success message
            messageTitle = "Success!";
            messageContent = $"Transaction Added: Amount: {transaction.Amount}, Date: {transaction.Date}, Category: {transaction.Category}, Notes: {transaction.Notes}";
            isMessageVisible = true;
        }
        catch (Exception ex)
        {
            // Error message
            messageTitle = "Error!";
            messageContent = $"An error occurred: {ex.Message}";
            isMessageVisible = true;
        }
    }

    private void CloseMessageBox()
    {
        isMessageVisible = false;
    }
}
