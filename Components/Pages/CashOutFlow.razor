@page "/add-cash-out"
@using TrackMyExpenses.Model
@using TrackMyExpenses.Services
@inject NavigationManager Navigation
@inject TransactionService TransactionService
@inject UserServices UserServices

<h3>Add Cash Out</h3>

<EditForm Model="@transaction" OnValidSubmit="HandleSubmit"
          style="max-width: 800px; margin: 0 auto; background: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Form Fields in Two Columns -->
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
        <!-- Amount -->
        <div>
            <label for="amount" class="block text-sm font-semibold text-gray-700">Amount</label>
            <InputNumber id="amount" @bind-Value="transaction.Amount"
                         class="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" />
        </div>

        <!-- Transaction Date -->
        <div>
            <label for="date" class="block text-sm font-semibold text-gray-700">Transaction Date</label>
            <InputDate id="date" @bind-Value="transaction.Date"
                       class="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" />
        </div>

        <!-- Category -->
        <div>
            <label for="category" class="block text-sm font-semibold text-gray-700">Category</label>
            <select id="category" @bind="transaction.Category"
                    class="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500">
                <option value="debit">Debit</option>
                <!-- Add more categories as needed -->
            </select>
        </div>
        

        <!-- Notes -->
        <div>
            <label for="notes" class="block text-sm font-semibold text-gray-700">Notes</label>
            <InputTextArea id="notes" @bind-Value="transaction.Notes" rows="2"
                           class="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" />
        </div>

          <!-- Tags -->
        <div class="sm:col-span-2">
            <label for="tags" class="block text-sm font-semibold text-gray-700">Tags </label>
            <InputText id="tags" @bind-Value="tagsInput"
                       class="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" />
        </div>

         <!-- Description -->
        <div class="sm:col-span-2">
            <label for="description" class="block text-sm font-semibold text-gray-700">Description</label>
            <InputTextArea id="description" @bind-Value="transaction.Description" rows="3"
                           class="w-full p-3 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" />
        </div>

      
    </div>

    <!-- Submit Button -->
    <div style="text-align: center; margin-top: 1.5rem;">
        <button type="submit" style="background: linear-gradient(135deg, #4e73df, #6f42c1); color: white; padding: 0.75rem 2rem; border: none; border-radius: 6px; font-size: 1rem; font-weight: 500; cursor: pointer; transition: background-color 0.3s; width: 100%; max-width: 200px;">
            Submit
        </button>
    </div>
</EditForm>

@if (isMessageVisible)
{
        <div class="fixed top-0 left-0 w-full h-full bg-black bg-opacity-50 flex justify-center items-center z-50">
            <div class="bg-white p-6 rounded shadow-lg w-1/3 text-center">
                <h3 class="text-xl font-bold">@messageTitle</h3>
                <p>@messageContent</p>
                <button class="mt-4 px-6 py-2 bg-indigo-600 text-white rounded-full" @onclick="CloseMessageBox">Close</button>
            </div>
        </div>
}

@code {
    private Transactions transaction = new Transactions
        {
            Date = DateTime.Today, // Correctly initialize Date here
            Category = "debit" // Set default category to "Debit"
        };

    private string tagsInput = string.Empty;
    private string messageTitle = string.Empty;
    private string messageContent = string.Empty;
    private bool isMessageVisible = false;

    // Handle form submission
    private async Task HandleSubmit()
    {
        try
        {
            // Get logged-in user's details
            var loggedInUser = UserServices.GetLoggedInUser();
            if (loggedInUser == null)
            {
                throw new InvalidOperationException("User is not logged in.");
            }

            // Add the UserName to the transaction
            transaction.UserName = loggedInUser.UserName;

            // Parse tags from input and ensure it's not null or empty
            transaction.Tags = string.IsNullOrWhiteSpace(tagsInput)
                ? new List<string>()
                : tagsInput.Split(',').Select(tag => tag.Trim()).Where(tag => !string.IsNullOrEmpty(tag)).ToList();

            // Ensure a unique ID and transaction type
            transaction.Id = Guid.NewGuid().ToString(); // Generate unique ID
            transaction.TransactionType = "Outflow"; // Specify transaction type

            // Add Notes only if provided, otherwise leave null
            if (string.IsNullOrWhiteSpace(transaction.Notes))
            {
                transaction.Notes = null;
            }

            // Save transaction
            await TransactionService.AddTransactionAsync(transaction);

            // Success message
            messageTitle = "Success!";
            messageContent = $"Transaction Added: Amount: {transaction.Amount}, Date: {transaction.Date}, Category: {transaction.Category}, Notes: {transaction.Notes}";
            isMessageVisible = true;

            // Optionally reset fields after successful submission
            transaction = new Transactions { Date = DateTime.Today }; // Reset transaction object
            tagsInput = string.Empty; // Reset tags input field
        }
        catch (Exception ex)
        {
            // Error handling
            messageTitle = "Error!";
            messageContent = $"An error occurred: {ex.Message}";
            isMessageVisible = true;
        }
    }

    // Close the message box
    private void CloseMessageBox()
    {
        isMessageVisible = false;
        Navigation.NavigateTo("/dashboard"); // Redirect to the dashboard
    }
}
