@page "/view-transactions"
@using CsvHelper;
@using CsvHelper.Configuration;
@using System.Globalization;
@using System.IO;
@using TrackMyExpenses.Model
@using TrackMyExpenses.Services
@inject TransactionService TransactionService
@inject IJSRuntime JSRuntime
@inject UserServices UserServices
@inject CurrencyService CurrencyService



<div class="transactions-container">
    @if (isLoading)
    {
        <div class="loading-state">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading transactions...</span>
            </div>
        </div>
    }
    else if (error != null)
    {
        <div class="alert alert-danger shadow-sm" role="alert">
            <h4 class="alert-heading">Error Loading Transactions</h4>
            <p>@error</p>
            <button class="btn btn-outline-danger" @onclick="RetryLoad">Retry</button>
        </div>
    }
    else
    {
        <div class="container-fluid py-4">
            <div class="text-end mb-4">
                <button class="btn btn-primary" @onclick="DownloadTransactionsCsv">Download Transactions CSV</button>
            </div>

            <!-- Header Section -->
            <div class="row align-items-center mb-4">
                <div class="col">
                    <h1 class="display-5 mb-0">Transactions</h1>
                    <p class="text-muted mb-0">View and manage your financial activity</p>
                </div>
                <div class="col-auto">
                    <div class="summary-badges">
                        <div class="summary-badges">
                            <span class="badge bg-success-subtle text-success me-2">
                                Total Inflows: @ConvertToSelectedCurrency(inflows.Sum(t => t.Amount), SelectedCurrency) @SelectedCurrency
                            </span>
                            <span class="badge bg-danger-subtle text-danger">
                                Total Outflows: @ConvertToSelectedCurrency(outflows.Sum(t => t.Amount), SelectedCurrency) @SelectedCurrency
                            </span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Filter Section -->
            <div class="filter-section card shadow-sm mb-4 rounded-3">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-12 col-md-4">
                            <div class="search-box position-relative">
                                <i class="bi bi-search position-absolute ps-3 pt-2 text-muted"></i>
                                <input type="text"
                                       @bind="searchTerm"
                                       @bind:event="oninput"
                                       placeholder="Search transactions..."
                                       class="form-control ps-5" />
                            </div>
                        </div>
                        <div class="col-12 col-md-2">
                            <select @bind="selectedCategory" class="form-select">
                                <option value="">All Types</option>
                                <option value="credit">Inflows</option>
                                <option value="debit">Outflows</option>
                            </select>
                        </div>
                        <div class="col-12 col-md-3">
                            <input type="date"
                                   @bind="startDate"
                                   class="form-control"
                                   placeholder="Start Date" />
                        </div>
                        <div class="col-12 col-md-3">
                            <input type="date"
                                   @bind="endDate"
                                   class="form-control"
                                   placeholder="End Date" />
                        </div>
                    </div>
                </div>
            </div>

            @if (!inflows.Any() && !outflows.Any())
            {
                <div class="empty-state text-center py-5">
                    <i class="bi bi-wallet2 display-1 text-muted mb-3"></i>
                    <h3>No Transactions Yet</h3>
                    <p class="text-muted">Start adding transactions to track your financial activity</p>
                    <a href="/add-transaction" class="btn btn-primary mt-2">
                        Add Your First Transaction
                    </a>
                </div>
            }
            else
            {
                <div class="row">
                    <!-- Cash Inflows -->
                    @if (string.IsNullOrEmpty(selectedCategory) || selectedCategory == "credit")
                    {
                        <div class="col-12 @(string.IsNullOrEmpty(selectedCategory) ? "col-lg-6" : "col-lg-8 mx-auto") mb-4">
                            <div class="transaction-card card h-100 shadow-sm rounded-3">
                                <div class="card-header bg-success bg-opacity-10 d-flex justify-content-between align-items-center rounded-top-3">
                                    <h3 class="card-title text-success mb-0">
                                        <i class="bi bi-arrow-down-circle me-2"></i>Inflows
                                    </h3>
                                    <span class="badge bg-success-subtle text-success">
                                        @filteredInflows.Count() items
                                    </span>
                                </div>
                                <div class="card-body p-0">
                                    @if (!filteredInflows.Any())
                                    {
                                        <div class="text-center py-4">
                                            <p class="text-muted mb-0">No matching inflow transactions found</p>
                                        </div>
                                    }
                                    else
                                    {
                                        <ul class="list-unstyled m-0">
                                            @foreach (var transaction in filteredInflows)
                                            {
                                                <li class="transaction-item p-3 border-bottom">
                                                    <div class="card border-start border-success border-4 shadow-sm rounded-3">
                                                        <div class="card-body">
                                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                                <span class="h5 text-success mb-0">
                                                                    @ConvertToSelectedCurrency(@transaction.Amount, @SelectedCurrency) @SelectedCurrency
                                                                </span>
                                                                <div class="text-end">
                                                                    <small class="text-muted d-block">
                                                                        @transaction.Date.ToShortDateString()
                                                                    </small>
                                                                    <small class="text-muted">
                                                                        @transaction.Date.ToString("HH:mm")
                                                                    </small>
                                                                </div>
                                                            </div>
                                                            <p class="mb-2">@transaction.Description</p>
                                                            <div class="tags">
                                                                @foreach (var tag in transaction.Tags)
                                                                {
                                                                    <span class="badge bg-light text-secondary me-1">
                                                                        <i class="bi bi-tag me-1"></i>@tag
                                                                    </span>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </li>
                                            }
                                        </ul>
                                    }
                                </div>
                            </div>
                        </div>
                    }

                    <!-- Cash Outflows -->
                    @if (string.IsNullOrEmpty(selectedCategory) || selectedCategory == "debit")
                    {
                        <div class="col-12 @(string.IsNullOrEmpty(selectedCategory) ? "col-lg-6" : "col-lg-8 mx-auto") mb-4">
                            <div class="transaction-card card h-100 shadow-sm rounded-3">
                                <div class="card-header bg-danger bg-opacity-10 d-flex justify-content-between align-items-center rounded-top-3">
                                    <h3 class="card-title text-danger mb-0">
                                        <i class="bi bi-arrow-up-circle me-2"></i>Outflows
                                    </h3>
                                    <span class="badge bg-danger-subtle text-danger">
                                        @filteredOutflows.Count() items
                                    </span>
                                </div>
                                <div class="card-body p-0">
                                    @if (!filteredOutflows.Any())
                                    {
                                        <div class="text-center py-4">
                                            <p class="text-muted mb-0">No matching outflow transactions found</p>
                                        </div>
                                    }
                                    else
                                    {
                                        <ul class="list-unstyled m-0">
                                            @foreach (var transaction in filteredOutflows)
                                            {
                                                <li class="transaction-item p-3 border-bottom">
                                                    <div class="card border-start border-danger border-4 shadow-sm rounded-3">
                                                        <div class="card-body">
                                                            <div class="d-flex justify-content-between align-items-start mb-2">
                                                                <span class="h5 text-danger mb-0">
                                                                    @ConvertToSelectedCurrency(@transaction.Amount, SelectedCurrency) @SelectedCurrency
                                                                </span>
                                                                <div class="text-end">
                                                                    <small class="text-muted d-block">
                                                                        @transaction.Date.ToShortDateString()
                                                                    </small>
                                                                    <small class="text-muted">
                                                                        @transaction.Date.ToString("HH:mm")
                                                                    </small>
                                                                </div>
                                                            </div>
                                                            <p class="mb-2">@transaction.Description</p>
                                                            <div class="tags">
                                                                @foreach (var tag in transaction.Tags)
                                                                {
                                                                    <span class="badge bg-light text-secondary me-1">
                                                                        <i class="bi bi-tag me-1"></i>@tag
                                                                    </span>
                                                                }
                                                            </div>
                                                        </div>
                                                    </div>
                                                </li>
                                            }
                                        </ul>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

<style>
    .transactions-container {
        background: linear-gradient(to right, #4e54c8, #8f94fb);
        padding: 2rem;
        border-radius: 1rem;
    }

    .transaction-card {
        border-radius: 1rem;
    }

    .transaction-item {
        border-radius: 1rem;
    }

    .card-header {
        border-top-left-radius: 1rem;
        border-top-right-radius: 1rem;
    }
</style>


@code {
    private string SelectedCurrency;


    private List<Transactions> inflows = new();
    private List<Transactions> outflows = new();
    private string searchTerm = string.Empty;
    private string selectedCategory = string.Empty;
    private DateTime? startDate = null;
    private DateTime? endDate = null;
    private bool isLoading = true;
    private string? error;

    private IEnumerable<Transactions> filteredInflows => inflows
        .Where(t => (string.IsNullOrEmpty(searchTerm) ||
                     (t.Description != null && t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                     (t.Tags != null && t.Tags.Any(tag => tag.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))) &&
                     (!startDate.HasValue || t.Date >= startDate.Value) &&
                     (!endDate.HasValue || t.Date <= endDate.Value))
        .OrderByDescending(t => t.Date);

    private IEnumerable<Transactions> filteredOutflows => outflows
        .Where(t => (string.IsNullOrEmpty(searchTerm) ||
                     (t.Description != null && t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                     (t.Tags != null && t.Tags.Any(tag => tag.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))) &&
                     (!startDate.HasValue || t.Date >= startDate.Value) &&
                     (!endDate.HasValue || t.Date <= endDate.Value))
        .OrderByDescending(t => t.Date);

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        SelectedCurrency = GlobalState.Instance.PreferredCurrency ?? "USD";
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            error = null;

            var loggedInUser = UserServices.GetLoggedInUser();
            var transactions = await TransactionService.LoadTransactionsAsync();

            inflows = transactions
                .Where(t => t.UserName == loggedInUser.UserName && t.Category == "credit")
                .ToList();
            outflows = transactions
                .Where(t => t.UserName == loggedInUser.UserName && t.Category == "debit")
                .ToList();
        }
        catch (Exception ex)
        {
            error = "Unable to load transactions. Please try again later.";
            Console.WriteLine($"Error loading transactions: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DownloadTransactionsCsv()
    {
        try
        {
            var transactions = inflows.Concat(outflows).OrderByDescending(t => t.Date).ToList();

            using var memoryStream = new MemoryStream();
            using var streamWriter = new StreamWriter(memoryStream);
            using var csvWriter = new CsvWriter(streamWriter, new CsvConfiguration(CultureInfo.InvariantCulture)
                {
                    HasHeaderRecord = true,
                });

            csvWriter.WriteHeader<Transactions>();
            await csvWriter.NextRecordAsync();
            await csvWriter.WriteRecordsAsync(transactions);

            await streamWriter.FlushAsync();

            var bytes = memoryStream.ToArray();
            var base64 = Convert.ToBase64String(bytes);
            var fileName = "transactions.csv";

            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64);
        }
        catch (Exception ex)
        {
            error = $"Failed to export CSV: {ex.Message}";
        }
    }

    private async Task RefreshData(string userName)
    {
        try
        {
            isLoading = true;
            error = null;

            // Fetch all transactions again
            var transactions = await TransactionService.LoadTransactionsAsync();

            // Filter transactions based on the provided userName and update inflows and outflows
            inflows = transactions
                .Where(t => t.UserName == userName && t.Category == "credit")
                .ToList();

            outflows = transactions
                .Where(t => t.UserName == userName && t.Category == "debit")
                .ToList();
        }
        catch (Exception ex)
        {
            error = "Failed to refresh transactions. Please try again later.";
            Console.WriteLine($"Error refreshing data for user {userName}: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }


    private async Task ChangeCurrency(ChangeEventArgs e)
    {
        SelectedCurrency = e.Value?.ToString() ?? "USD";
        CurrencyService.PreferredCurrency = SelectedCurrency;

        Console.WriteLine($"[DEBUG] Currency changed to: {SelectedCurrency}");
        await RefreshData(UserServices.GetLoggedInUser().UserName);
    }

    private decimal ConvertToSelectedCurrency(decimal amount, string currency)
    {
        var convertedAmount = CurrencyService.ConvertAmount(amount, currency);
        Console.WriteLine($"[DEBUG] Conversion: {amount} {CurrencyService.PreferredCurrency} -> {convertedAmount}");
        return convertedAmount;
    }

    private async Task RetryLoad()
    {
        await LoadData();
    }
}

