@page "/view-transactions"
@using TrackMyExpenses.Model
@using TrackMyExpenses.Services

@inject TransactionService TransactionService
@inject UserServices UserServices

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col">
            <h1 class="display-4 mb-4 pb-2 border-bottom">Dashboard </h1>
        </div>
    </div>

    <!-- Filtering Options -->
    <div class="row mb-4">
        <div class="col-12 col-md-6 mb-3">
            <input type="text"
                   @bind="searchTerm"
                   placeholder="Search transactions..."
                   class="form-control" />
        </div>
        <div class="col-12 col-md-6 mb-3">

            <select @bind="selectedCategory" class="form-select">
                <option value="">Date</option>
                <option value="credit">Credit</option>
                <option value="debit">Debit</option>
            </select>
        </div>
        <!-- Date Range Filters -->
        <div class="col-12 col-md-3 mb-3">
            <input type="date"
                   @bind="startDate"
                   class="form-control"
                   placeholder="Start Date" />
        </div>
        <div class="col-12 col-md-3 mb-3">
            <input type="date"
                   @bind="endDate"
                   class="form-control"
                   placeholder="End Date" />
        </div>
    </div>

    <!-- Transactions Table -->
    <div class="row">
        <div class="col-12">
            <div class="card h-100">
                <div class="card-header">
                    <h3 class="card-title mb-0">All Transactions</h3>
                </div>
                <div class="card-body">
                    <table class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <th>Description</th>
                                <th>Amount</th>
                                <th>Category</th>
                                <th>Date</th>
                                <th>Tags</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var transaction in filteredTransactions)
                            {
                                <tr>
                                    <td>@transaction.Description</td>
                                    <td class="@(transaction.Category == "credit" ? "text-success" : "text-danger")">
                                        @((transaction.Category == "credit" ? "+" : "-") + transaction.Amount.ToString("C"))
                                    </td>
                                    <td>@transaction.Category</td>
                                    <td>@transaction.Date.ToShortDateString()</td>
                                    <td>
                                        @foreach (var tag in transaction.Tags)
                                        {
                                            <span class="badge bg-light text-secondary me-1">@tag</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Transactions> allTransactions = new List<Transactions>();
    private List<Transactions> filteredTransactions => allTransactions
        .Where(t => (string.IsNullOrEmpty(searchTerm) || t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                    (!startDate.HasValue || t.Date >= startDate.Value) &&
                    (!endDate.HasValue || t.Date <= endDate.Value) &&
                    (string.IsNullOrEmpty(selectedCategory) || t.Category == selectedCategory))
        .ToList();
    private string searchTerm = string.Empty;
    private string selectedCategory = string.Empty;
    private DateTime? startDate = null;
    private DateTime? endDate = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch logged-in user
            var loggedInUser = UserServices.GetLoggedInUser(); // Ensure async if it's async
            if (loggedInUser == null)
            {
                throw new InvalidOperationException("User is not logged in.");
            }

            // Fetch transactions specific to the logged-in user
            var transactions = await TransactionService.LoadTransactionsAsync();
            Console.WriteLine($"Loaded transactions for {loggedInUser.UserName}: {transactions.Count}");

            // Combine inflows and outflows for the logged-in user
            allTransactions = transactions
                .Where(t => t.UserName == loggedInUser.UserName)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading transactions: {ex.Message}");
        }
    }
}
