@page "/register"
@using TrackMyExpenses.Model
@inject TrackMyExpenses.Services.UserServices UserServices
@inject NavigationManager NavigationManager

<div class="flex justify-center items-center min-h-screen bg-gradient-to-b from-blue-200 via-purple-200 to-gray-100">
    <div class="w-full max-w-sm bg-white p-6 rounded-lg shadow-md">
        <h3 class="text-center text-2xl font-semibold text-gray-800 mb-6">Register</h3>

        <!-- Username Field -->
        <div class="mb-4">
            <label for="username" class="block text-sm font-medium text-gray-700">Username</label>
            <input id="username" @bind="RegisterUsername" type="text" placeholder="Enter your username"
                   class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent" />
        </div>

        <!-- Email Field -->
        <div class="mb-4">
            <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
            <input id="email" @bind="RegisterEmail" type="email" placeholder="Enter your email"
                   class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent" />
        </div>

        <!-- Preferred Currency Field -->
        <div class="mb-4">
            <label for="currency" class="block text-sm font-medium text-gray-700">Preferred Currency</label>
            <select id="currency" @bind="PreferredCurrency"
                    class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent">
                <option value="NPR">NPR</option>
                    <option value="USD">USD</option>
                
            </select>
        </div>

        <!-- Password Field -->
        <div class="mb-6">
            <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
            <input id="password" @bind="RegisterPassword" type="password" placeholder="Enter your password"
                   class="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent" />
        </div>

        <!-- Register Button -->
        <button @onclick="HandleRegistration"
                class="w-full px-4 py-2 bg-gradient-to-r from-purple-500 via-blue-500 to-purple-500 text-white font-semibold rounded-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-offset-2">
            Register
        </button>

        <!-- Message -->
        @if (!string.IsNullOrEmpty(Message))
        {
            <p class="text-center text-sm text-red-500 mt-4">@Message</p>
        }

        <!-- Login Redirect -->
        <div class="mt-6 text-center">
            <p class="text-sm text-gray-600">
                Already have an account?
                <a href="/" class="text-blue-500 hover:underline">Login here</a>.
            </p>
        </div>
    </div>
</div>

@code {
    private string RegisterUsername = "";
    private string RegisterPassword = "";
    private string RegisterEmail = "";
    private string PreferredCurrency = "NPR";
    private string Message = "";

    private List<User> Users = new();

    protected override void OnInitialized()
    {
        // Load existing users from UserService
        Users = UserServices.LoadUsers();
    }

    private async Task HandleRegistration()
    {
        // Check if all fields are filled
        if (string.IsNullOrWhiteSpace(RegisterUsername) || string.IsNullOrWhiteSpace(RegisterPassword) || string.IsNullOrWhiteSpace(RegisterEmail))
        {
            Message = "All fields are required.";
            return;
        }

        if (Users.Any(u => u.UserName == RegisterUsername))
        {
            Message = "Username already exists.";
            return;
        }

        if (Users.Any(u => u.Email == RegisterEmail))
        {
            Message = "Email already in use.";
            return;
        }

        // Create new user object
        var newUser = new User
            {
                UserName = RegisterUsername,
                Password = UserServices.HashPassword(RegisterPassword),
                Email = RegisterEmail,
                PreferredCurrency = PreferredCurrency
            };

        Users.Add(newUser);

        // Save the updated user list
        UserServices.SaveUsers(Users);

        // Successful registration
        Message = "Registration successful. Redirecting to login...";
        await Task.Delay(2000);

        // Redirect to login page
        NavigationManager.NavigateTo("/");
    }
}
