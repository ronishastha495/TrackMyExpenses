@page "/register"
@using TrackMyExpenses.Models
@inject TrackMyExpenses.Services.UserServices UserServices
@inject NavigationManager NavigationManager

<div class="min-vh-100 d-flex align-items-center justify-content-center bg-gradient">
    <div class="card shadow-lg" style="max-width: 400px; width: 100%;">
        <div class="card-body">
            <h3 class="text-center mb-4 text-primary">Register</h3>

            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <input id="username" @bind="RegisterUsername" class="form-control" placeholder="Username" />
            </div>

            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <input id="email" @bind="RegisterEmail" class="form-control" placeholder="Email" />
            </div>

            <div class="mb-3">
                <label for="currency" class="form-label">Preferred Currency</label>
                <select id="currency" @bind="PreferredCurrency" class="form-select">
                    <option value="USD">USD</option>
                    <option value="NRS">NRS</option>
                </select>
            </div>

            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input id="password" @bind="RegisterPassword" type="password" class="form-control" placeholder="Password" />
            </div>

            <button @onclick="HandleRegistration" class="btn btn-primary w-100 bg-gradient">
                Register
            </button>

            <div class="text-center mt-3">
                <p class="text-muted">
                    Already have an account? <NavLink href="/" class="text-primary">Login here</NavLink>.
                </p>
            </div>
        </div>
    </div>

    <!-- Dialog Box -->
    @if (!string.IsNullOrEmpty(DialogMessage))
    {
        <div class="toast-container position-fixed top-0 end-0 p-3">
            <div class="toast show text-white @DialogType" role="alert">
                <div class="d-flex">
                    <div class="toast-body">
                        @DialogMessage
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" aria-label="Close" @onclick="() => DialogMessage = string.Empty"></button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string RegisterUsername = "";
    private string RegisterPassword = "";
    private string RegisterEmail = "";
    private string PreferredCurrency = "USD";
    private string DialogMessage = "";
    private string DialogType = "bg-success"; // Success or Error class

    private List<User> Users = new();

    protected override void OnInitialized()
    {
        Users = UserServices.LoadUsers();
    }

    private async Task HandleRegistration()
    {
        DialogMessage = "";

        if (string.IsNullOrWhiteSpace(RegisterUsername) || string.IsNullOrWhiteSpace(RegisterPassword) || string.IsNullOrWhiteSpace(RegisterEmail))
        {
            ShowDialog("All fields are required.", isError: true);
            return;
        }

        if (Users.Any(u => u.UserName == RegisterUsername))
        {
            ShowDialog("Username already exists.", isError: true);
            return;
        }

        if (Users.Any(u => u.Email == RegisterEmail))
        {
            ShowDialog("Email already in use.", isError: true);
            return;
        }

        var newUser = new User
            {
                UserName = RegisterUsername,
                Password = UserServices.HashPassword(RegisterPassword),
                Email = RegisterEmail,
                PreferredCurrency = PreferredCurrency
            };

        Users.Add(newUser);
        UserServices.SaveUsers(Users);

        ShowDialog("Registration successful. Redirecting to login...");
        await Task.Delay(2000);
        NavigationManager.NavigateTo("/");
    }

    private async void ShowDialog(string message, bool isError = false)
    {
        DialogType = isError ? "bg-danger" : "bg-success";
        DialogMessage = message;
        await Task.Delay(3000);
        DialogMessage = "";
        StateHasChanged();
    }
}
