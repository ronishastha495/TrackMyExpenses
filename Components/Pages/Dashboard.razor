@page "/dashboard"
@inject NavigationManager Navigation
@using TrackMyExpenses.Model
@using TrackMyExpenses.Services
@inject TransactionService TransactionService
@inject UserServices UserServices
@inject DebtService DebtService
@inject CurrencyService CurrencyService

@{
    var loggedInUser = UserServices.GetLoggedInUser();
}

<div class="top-nav shadow-sm" style="background: linear-gradient(to right, #4e54c8, #8f94fb); border-radius: 10px;">
    <div class="container-fluid d-flex justify-content-between align-items-center py-3 text-white">
        <!-- Left Section: Currency Selector -->
        <div class="d-flex align-items-center gap-4">
            <div class="currency-selector d-flex align-items-center">
                <label class="form-label mb-0 me-2 text-white">Currency:</label>
                <select id="currency" class="form-select form-select-sm" @onchange="ChangeCurrency" style="width: auto;">
                    <option value="USD">USD</option>
                    <option value="NRS">NRS</option>
                </select>
            </div>
            <p class="mb-0">Selected Currency: <span class="fw-bold">@CurrencyService.PreferredCurrency</span></p>
        </div>

        <!-- Right Section: User Profile -->
        <div class="user-profile d-flex align-items-center">
            <span class="me-2 text-white">Welcome,</span>
            <span class="fw-bold text-white">@loggedInUser.UserName</span>
        </div>
    </div>
</div>


@if (isLoading)
{
    <div class="loading-container text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading your financial data...</p>
    </div>
}
else if (error != null)
{
    <div class="alert alert-danger" role="alert">
        <h4 class="alert-heading">Oops! Something went wrong</h4>
        <p>@error</p>
        <button class="btn btn-outline-danger" @onclick="RetryLoad">Retry</button>
    </div>
}
else
{
    <div class="dashboard-container d-flex flex-column align-items-center">
        <NavMenu />
        <div class="main-content flex-grow-1 p-4 w-100">
            <h2 class="mb-4 text-center">Dashboard Overview</h2>
            <div class="container-fluid p-4">
                <div class="row g-4">
                    <!-- Available Balance Card -->
                    <div class="col-md-6 col-xl-3">
                        <div class="card border-0 h-100 shadow-sm" style="background: linear-gradient(45deg, #4e54c8, #8f94fb);">
                            <div class="card-body p-4">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div>
                                        <h6 class="card-title text-white mb-1">Total Balance</h6>
                                    </div>
                                    <div class="rounded-circle bg-white bg-opacity-25 p-3">
                                        <i class="bi bi-graph-up-arrow text-white fs-4"></i>
                                    </div>
                                </div>
                                <p class="display-6 fw-bold text-white">@ConvertToSelectedCurrency(AvailableBalance, @SelectedCurrency) @SelectedCurrency</p>
                            </div>
                        </div>
                    </div>

                    <!-- Total Inflows Card -->
                    <div class="col-md-6 col-xl-3">
                        <div class="card border-0 h-100 shadow-sm" style="background: linear-gradient(45deg, #4e54c8, #8f94fb);">
                            <div class="card-body p-4">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div>
                                        <h6 class="card-title text-white mb-1">Total Inflows</h6>
                                        <small class="text-white-50">Income & Deposits</small>
                                    </div>
                                    <div class="rounded-circle bg-white bg-opacity-25 p-3">
                                        <i class="bi bi-graph-up-arrow text-white fs-4"></i>
                                    </div>
                                </div>
                                <div class="mt-4">
                                    @if (TotalInflows == 0)
                                    {
                                        <h2 class="text-white mb-1">No inflows yet</h2>
                                    }
                                    else
                                    {
                                        <h2 class="text-white mb-1">@ConvertToSelectedCurrency(TotalInflows, @SelectedCurrency) @SelectedCurrency</h2>
                                    }
                                    <div class="d-flex align-items-center mt-2">
                                        <i class="bi bi-arrow-down-circle-fill text-white me-1"></i>
                                        <small class="text-white">Monthly income</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Total Outflows Card -->
                    <div class="col-md-6 col-xl-3">
                        <div class="card border-0 h-100 shadow-sm" style="background: linear-gradient(45deg, #4e54c8, #8f94fb);">
                            <div class="card-body p-4">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div>
                                        <h6 class="card-title text-white mb-1">Total Outflows</h6>
                                        <small class="text-white-50">Expenses & Withdrawals</small>
                                    </div>
                                    <div class="rounded-circle bg-white bg-opacity-25 p-3">
                                        <i class="bi bi-graph-down-arrow text-white fs-4"></i>
                                    </div>
                                </div>
                                <div class="mt-4">
                                    @if (TotalOutflows == 0)
                                    {
                                        <h2 class="text-white mb-1">No outflows yet</h2>
                                    }
                                    else
                                    {
                                        <h2 class="text-white mb-1">@ConvertToSelectedCurrency(TotalOutflows, @SelectedCurrency) @SelectedCurrency</h2>
                                    }
                                    <div class="d-flex align-items-center mt-2">
                                        <i class="bi bi-arrow-up-circle-fill text-white me-1"></i>
                                        <small class="text-white">Monthly expenses</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Total Debts Card -->
                    <div class="col-md-6 col-xl-3">
                        <div class="card border-0 h-100 shadow-sm" style="background: linear-gradient(45deg, #4e54c8, #8f94fb);">
                            <div class="card-body p-4">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <div>
                                        <h6 class="card-title text-white mb-1">Total Debts</h6>
                                        <small class="text-white-50">Outstanding Balance</small>
                                    </div>
                                    <div class="rounded-circle bg-white bg-opacity-25 p-3">
                                        <i class="bi bi-cash-stack text-white fs-4"></i>
                                    </div>
                                </div>
                                <div class="mt-4">
                                    @if (TotalDebts == 0)
                                    {
                                        <h2 class="text-white mb-1">No debts yet</h2>
                                    }
                                    else
                                    {
                                        <h2 class="text-white mb-1">@ConvertToSelectedCurrency(TotalDebts, @SelectedCurrency) @SelectedCurrency</h2>
                                    }
                                    <div class="d-flex align-items-center mt-2">
                                        <i class="bi bi-exclamation-circle-fill text-white me-1"></i>
                                        <small class="text-white">Total pending</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <h2 class="my-4 text-center">Transaction Insights</h2>
            @if (!HasAnyTransactions)
            {
                <div class="empty-state text-center py-5 bg-light rounded">
                    <i class="bi bi-wallet2 fs-1 text-primary"></i>
                    <h4 class="mt-3 text-primary">No Transactions Yet</h4>
                    <p class="text-secondary">Start adding your transactions to see insights here.</p>
                    <button class="btn btn-primary btn-lg mt-2" @onclick="@(() => Navigation.NavigateTo("/add-transaction"))">
                        Add Your First Transaction
                    </button>
                </div>
            }
            else
            {
                <div class="summary-cards row g-4 justify-content-center">
                    <!-- Highest Inflow Card -->
                    <div class="col-md-4">
                        <div class="card border-0 shadow-lg bg-primary text-white h-100">
                            <div class="card-body text-center">
                                <h5 class="card-title">Highest Inflow</h5>
                                @if (HighestInflow == null)
                                {
                                    <p class="text-light">No inflows recorded</p>
                                }
                                else
                                {
                                    <p class="display-6 fw-bold">@ConvertToSelectedCurrency(HighestInflow.Amount, @SelectedCurrency) @SelectedCurrency</p>
                                    <small>@HighestInflow.Date.ToShortDateString()</small>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Lowest Inflow Card -->
                    <div class="col-md-4">
                        <div class="card border-0 shadow-lg bg-info text-white h-100">
                            <div class="card-body text-center">
                                <h5 class="card-title">Lowest Inflow</h5>
                                @if (LowestInflow == null)
                                {
                                    <p class="text-light">No inflows recorded</p>
                                }
                                else
                                {
                                    <p class="display-6 fw-bold">@ConvertToSelectedCurrency(LowestInflow.Amount, @SelectedCurrency) @SelectedCurrency</p>
                                    <small>@LowestInflow.Date.ToShortDateString()</small>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Highest Outflow Card -->
                    <div class="col-md-4">
                        <div class="card border-0 shadow-lg bg-danger text-white h-100">
                            <div class="card-body text-center">
                                <h5 class="card-title">Highest Outflow</h5>
                                @if (HighestOutflow == null)
                                {
                                    <p class="text-light">No outflows recorded</p>
                                }
                                else
                                {
                                    <p class="display-6 fw-bold">@ConvertToSelectedCurrency(HighestOutflow.Amount, @SelectedCurrency) @SelectedCurrency</p>
                                    <small>@HighestOutflow.Date.ToShortDateString()</small>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Lowest Outflow Card -->
                    <div class="col-md-4">
                        <div class="card border-0 shadow-lg bg-warning text-dark h-100">
                            <div class="card-body text-center">
                                <h5 class="card-title">Lowest Outflow</h5>
                                @if (LowestOutflow == null)
                                {
                                    <p class="text-dark">No outflows recorded</p>
                                }
                                else
                                {
                                    <p class="display-6 fw-bold">@ConvertToSelectedCurrency(LowestOutflow.Amount, @SelectedCurrency) @SelectedCurrency</p>
                                    <small>@LowestOutflow.Date.ToShortDateString()</small>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Cleared Debt Card -->
                    <div class="col-md-4">
                        <div class="card border-0 shadow-lg bg-success text-white h-100">
                            <div class="card-body text-center">
                                <h5 class="card-title">Cleared Debt</h5>
                                @if (ClearedDebt == 0)
                                {
                                    <p class="text-light">No cleared debts</p>
                                }
                                else
                                {
                                    <p class="display-6 fw-bold">@ConvertToSelectedCurrency(ClearedDebt, @SelectedCurrency) @SelectedCurrency</p>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Remaining Debt Card -->
                    <div class="col-md-4">
                        <div class="card border-0 shadow-lg bg-purple text-white h-100">
                            <div class="card-body text-center">
                                <h5 class="card-title">Remaining Debt</h5>
                                @if (RemainingDebt == 0)
                                {
                                    <p class="text-light">No remaining debts</p>
                                }
                                else
                                {
                                    <p class="display-6 fw-bold">@ConvertToSelectedCurrency(RemainingDebt, @SelectedCurrency) @SelectedCurrency</p>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }

            <div class="card shadow-sm border-0 mt-4">
                <div class="card-header bg-white py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Top 5 Transactions</h5>
                    </div>
                </div>

                <div class="card-body p-0">
                    @if (TopTransactions.Count == 0)
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-credit-card fs-1 text-muted mb-3"></i>
                            <h5 class="text-muted">No Transactions Available</h5>
                            <p class="text-muted mb-3">Start adding your transactions to see them here.</p>
                            <button class="btn btn-primary" @onclick="@(() => Navigation.NavigateTo("/add-transaction"))">
                                Add Transaction
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="bg-light">
                                    <tr>
                                        <th class="px-4 py-3 text-center" style="width: 5%">#</th>
                                        <th class="px-4 py-3" style="width: 15%">Date</th>
                                        <th class="px-4 py-3" style="width: 35%">Description</th>
                                        <th class="px-4 py-3" style="width: 20%">Category</th>
                                        <th class="px-4 py-3 text-end" style="width: 15%">Amount</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var (transaction, index) in TopTransactions.Select((t, i) => (t, i + 1)))
                                    {
                                        <tr class="border-start border-4 border-secondary">
                                            <td class="px-4 py-3 text-center">@index</td>
                                            <td class="px-4 py-3">
                                                <div class="d-flex align-items-center">
                                                    <i class="bi @(transaction.Amount >= 0 ? "bi-arrow-down-circle text-success" : "bi-arrow-up-circle text-danger") me-2"></i>
                                                    @transaction.Date.ToShortDateString()
                                                </div>
                                            </td>
                                            <td class="px-4 py-3">
                                                <span class="fw-medium">@transaction.Description</span>
                                                @if (!string.IsNullOrEmpty(transaction.Notes))
                                                {
                                                    <small class="text-muted d-block">@transaction.Notes</small>
                                                }
                                            </td>
                                            <td class="px-4 py-3">
                                                <span class="badge @(transaction.Amount >= 0 ? "bg-success-subtle text-success" : "bg-danger-subtle text-danger") rounded-pill px-3 py-2">
                                                    @transaction.Category
                                                </span>
                                            </td>
                                            <td class="px-4 py-3 text-end">
                                                <span class="@(transaction.Amount >= 0 ? "text-success" : "text-danger") fw-semibold">
                                                    @ConvertToSelectedCurrency(transaction.Amount, @SelectedCurrency) @SelectedCurrency
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr class="bg-light fw-bold">
                                        <td colspan="4" class="px-4 py-3 text-end">Total:</td>
                                        <td class="px-4 py-3 text-end">
                                            @ConvertToSelectedCurrency(TopTransactions.Sum(t => t.Amount), @SelectedCurrency) @SelectedCurrency
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    }
                </div>
            </div>

            <div class="card shadow-sm border-0 mt-4">
                <div class="card-header bg-white py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Pending Debts</h5>
                    </div>
                </div>

                <div class="card-body p-0">
                    @if (PendingDebts.Count == 0)
                    {
                        <div class="text-center py-5">
                            <i class="bi bi-exclamation-triangle fs-1 text-muted mb-3"></i>
                            <h5 class="text-muted">No Pending Debts</h5>
                            <p class="text-muted mb-3">All debts are cleared. Great job!</p>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="bg-light">
                                    <tr>
                                        <th class="px-4 py-3 text-center" style="width: 5%">#</th>
                                        <th class="px-4 py-3" style="width: 35%">Source</th>
                                        <th class="px-4 py-3 text-center" style="width: 20%">Due Date</th>
                                        <th class="px-4 py-3 text-end" style="width: 20%">Amount</th>
                                        <th class="px-4 py-3 text-center" style="width: 20%">Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var (debt, index) in PendingDebts.Select((d, i) => (d, i + 1)))
                                    {
                                        <tr class="border-start border-4 border-warning">
                                            <td class="px-4 py-3 text-center">@index</td>
                                            <td class="px-4 py-3">
                                                <span class="fw-medium">@debt.Source</span>
                                                @if (!string.IsNullOrEmpty(debt.Notes))
                                                {
                                                    <small class="text-muted d-block">@debt.Notes</small>
                                                }
                                            </td>
                                            <td class="px-4 py-3 text-center">@debt.DueDate.ToShortDateString()</td>
                                            <td class="px-4 py-3 text-end">
                                                <span class="text-danger fw-semibold">@ConvertToSelectedCurrency(debt.Amount, @SelectedCurrency) @SelectedCurrency</span>
                                            </td>
                                            <td class="px-4 py-3 text-center">
                                                <span class="badge bg-warning-subtle text-warning rounded-pill px-3 py-2">
                                                    Pending
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                                <tfoot>
                                    <tr class="bg-light fw-bold">
                                        <td colspan="3" class="px-4 py-3 text-end">Total Pending:</td>
                                        <td class="px-4 py-3 text-end">
                                            @ConvertToSelectedCurrency(PendingDebts.Sum(d => d.Amount), @SelectedCurrency) @SelectedCurrency
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

            


@code {
    private decimal TotalInflows { get; set; } = 0;
    private decimal TotalOutflows { get; set; } = 0;
    private decimal TotalDebts { get; set; } = 0;
    private decimal AvailableBalance { get; set; } = 0;
    private string SelectedCurrency;
    private decimal ClearedDebt { get; set; }
    private decimal RemainingDebt { get; set; }
    private Transactions? HighestInflow { get; set; }
    private Transactions? LowestInflow { get; set; }
    private Transactions? HighestOutflow { get; set; }
    private Transactions? LowestOutflow { get; set; }
    private Transactions? HighestDebt { get; set; }
    private Transactions? LowestDebt { get; set; }
   

    private List<Transactions> TopTransactions { get; set; } = new List<Transactions>();
    private List<Debt> PendingDebts { get; set; } = new List<Debt>();

    private bool isLoading = true;
    private string? error;
    private Transactions transaction = new Transactions();

    private bool HasAnyTransactions =>
        HighestInflow != null || HighestOutflow != null ||
        LowestInflow != null || LowestOutflow != null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
{
            isLoading = true;
            error = null;

            var loggedInUser = UserServices.GetLoggedInUser();

            if (loggedInUser == null)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            // Use currency selection
            SelectedCurrency = GlobalState.Instance.PreferredCurrency;


            transaction.UserName = loggedInUser.UserName;
            await RefreshData(loggedInUser.UserName);

            TopTransactions = await TransactionService.GetTop5RecentTransactionsAsync(loggedInUser.UserName);
            PendingDebts = await DebtService.GetPendingDebtsAsync(loggedInUser.UserName);
        }
        catch (Exception ex)
        {
            error = "Unable to load your financial data. Please try again later.";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RetryLoad()
    {
        await LoadData();
    }

    private async Task RefreshData(string userName)
    {
        var debtSummary = await DebtService.GetDebtSummaryAsync(userName);
        ClearedDebt = debtSummary.clearedDebt;
        RemainingDebt = debtSummary.remainingDebt;

        TotalInflows = await TransactionService.GetTotalInflowsForUserAsync(userName);
        TotalOutflows = await TransactionService.GetTotalOutflowsForUserAsync(userName);
        TotalDebts = await DebtService.GetTotalDebtsAsync(userName);
        AvailableBalance = await TransactionService.GetTotalBalanceForUserAsync(userName);

        HighestInflow = await TransactionService.GetHighestInflowForUserAsync(userName);
        LowestInflow = await TransactionService.GetLowestInflowForUserAsync(userName);
        HighestOutflow = await TransactionService.GetHighestOutflowForUserAsync(userName);
        LowestOutflow = await TransactionService.GetLowestOutflowForUserAsync(userName);
    }




    private async Task ChangeCurrency(ChangeEventArgs e)
    {
        SelectedCurrency = e.Value?.ToString() ?? "USD";
        CurrencyService.PreferredCurrency = SelectedCurrency;

        Console.WriteLine($"[DEBUG] Currency changed to: {SelectedCurrency}");
        
        // Recalculate data with the new currency
        await RefreshData(UserServices.GetLoggedInUser().UserName);
    }

    private decimal ConvertToSelectedCurrency(decimal amount, String currency)
    {
        var convertedAmount = CurrencyService.ConvertAmount(amount, currency);
        Console.WriteLine($"[DEBUG] Conversion: {amount} {CurrencyService.PreferredCurrency} -> {convertedAmount}");
        return convertedAmount;
    }

}
