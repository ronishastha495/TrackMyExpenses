@page "/"
@using TrackMyExpenses.Model
@using TrackMyExpenses.Models
@using TrackMyExpenses.Services

@inject UserServices UserServices
@inject NavigationManager NavigationManager

<div class="min-vh-100 d-flex justify-content-center align-items-center bg-gradient" style="background: linear-gradient(to right, #4e54c8, #8f94fb);">
    <div class="card shadow-lg p-4" style="max-width: 400px; width: 100%; border-radius: 12px;">
        <div class="card-body">
            <h3 class="text-center mb-4 text-primary">Login</h3>

            <!-- Username Field -->
            <div class="form-group mb-3">
                <label for="username" class="form-label fw-bold">Username</label>
                <input id="username" @bind="LoginUsername" placeholder="Enter your username"
                       class="form-control" />
            </div>

            <!-- Password Field -->
            <div class="form-group mb-4">
                <label for="password" class="form-label fw-bold">Password</label>
                <input id="password" @bind="LoginPassword" type="password" placeholder="Enter your password"
                       class="form-control" />
            </div>

            <!-- Login Button -->
            <button @onclick="HandleLogin"
                    class="btn btn-primary w-100 fw-semibold">
                Login
            </button>

            <!-- Error Message Display -->
            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="alert alert-danger mt-3" role="alert">
                    @Message
                </div>
            }

            <!-- Register Link -->
            <div class="text-center mt-4">
                <p class="text-muted">
                    Don't have an account? <a href="#" @onclick="NavigateToRegister" class="text-decoration-none text-primary fw-bold">Register</a>
                </p>
            </div>
        </div>
    </div>
</div>

@code {
    private string LoginUsername = "";
    private string LoginPassword = "";
    private string Message = "";

    private List<User> Users = new();
    private string SelectedCurrency = "";

    protected override void OnInitialized()
    {
        // Load existing users from UserServices
        Users = UserServices.LoadUsers();
    }

    private async void HandleLogin()
    {
        // Check if all fields are filled
        if (string.IsNullOrWhiteSpace(LoginUsername) || string.IsNullOrWhiteSpace(LoginPassword))
        {
            Message = "Username and password are required.";
            return;
        }

        var user = Users.FirstOrDefault(u => u.UserName == LoginUsername);
        if (user == null)
        {
            Message = "User not found.";
            return;
        }

        if (!UserServices.ValidatePassword(LoginPassword, user.Password))
        {
            Message = "Invalid password.";
            return;
        }

        UserServices.SetLoggedInUser(user);
        SelectedCurrency = user.PreferredCurrency;

        // Successful login
        Message = "Login successful. Redirecting to home...";

        // Redirect after a delay
        await Task.Delay(2000);
        NavigationManager.NavigateTo("/dashboard");
    }

    private void NavigateToRegister()
    {
        // Redirect to registration page
        NavigationManager.NavigateTo("/register");
    }
}
