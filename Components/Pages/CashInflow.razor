@page "/cash-inflow"
@using TrackMyExpenses.Model
@using TrackMyExpenses.Services
@inject TransactionService TransactionService
@inject UserServices UserServices
@inject NavigationManager Navigation

<div style="max-width: 800px; margin: 2rem auto; padding: 2rem; background: white; border-radius: 12px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
    <h3 style="color: #2c3e50; font-size: 24px; margin-bottom: 1.5rem; text-align: center; font-weight: 600;">Add Transaction</h3>
    <EditForm Model="@transaction" OnValidSubmit="HandleSubmit" class="transaction-form">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem;">
            <!-- Amount -->
            <div>
                <label style="display: block; margin-bottom: 0.5rem; color: #4a5568; font-weight: 500;" for="amount">Amount</label>
                <InputNumber id="amount" @bind-Value="transaction.Amount" style="width: 100%; padding: 0.75rem; border: 1px solid #e2e8f0; border-radius: 6px; font-size: 1rem; transition: border-color 0.2s; outline: none;" />
            </div>

            <!-- Transaction Date -->
            <div>
                <label style="display: block; margin-bottom: 0.5rem; color: #4a5568; font-weight: 500;" for="date">Transaction Date</label>
                <input type="date" id="date" @bind="transaction.Date" class="form-control" style="width: 100%; padding: 0.75rem; border-radius: 6px; font-size: 1rem;" />
            </div>

            <!-- Description -->
            <div>
                <label style="display: block; margin-bottom: 0.5rem; color: #4a5568; font-weight: 500;" for="description">Description</label>
                <InputTextArea id="description" @bind-Value="transaction.Description" rows="3" style="width: 100%; padding: 0.75rem; border: 1px solid #e2e8f0; border-radius: 6px; font-size: 1rem; transition: border-color 0.2s; outline: none; resize: vertical;" />
            </div>

            <!-- Category -->
            <div>
                <label style="display: block; margin-bottom: 0.5rem; color: #4a5568; font-weight: 500;" for="category">Category</label>
                <select id="category" @bind="transaction.Category" style="width: 100%; padding: 0.75rem; border: 1px solid #e2e8f0; border-radius: 6px; font-size: 1rem; transition: border-color 0.2s; outline: none; background-color: white;">
                    <option value="credit">Credit</option>
                </select>
            </div>

            <!-- Notes -->
            <div>
                <label style="display: block; margin-bottom: 0.5rem; color: #4a5568; font-weight: 500;" for="notes">Notes</label>
                <InputTextArea id="notes" @bind-Value="transaction.Notes" rows="3" style="width: 100%; padding: 0.75rem; border: 1px solid #e2e8f0; border-radius: 6px; font-size: 1rem; transition: border-color 0.2s; outline: none; resize: vertical;" placeholder="Optional note about the transaction" />
            </div>

            <!-- Tags -->
            <div>
                <label style="display: block; margin-bottom: 0.5rem; color: #4a5568; font-weight: 500;" for="tags">Tags</label>
                <InputText id="tags" @bind-Value="tagsInput" style="width: 100%; padding: 0.75rem; border: 1px solid #e2e8f0; border-radius: 6px; font-size: 1rem; transition: border-color 0.2s; outline: none;" placeholder="Comma-separated tags" />
            </div>

            <!-- Existing Tags Dropdown -->
            <div>
                <label style="display: block; margin-bottom: 0.5rem; color: #4a5568; font-weight: 500;" for="existingTags">Select Existing Tags</label>
                <select id="existingTags" @bind="selectedTag" style="width: 100%; padding: 0.75rem; border: 1px solid #e2e8f0; border-radius: 6px; font-size: 1rem; transition: border-color 0.2s; outline: none; background-color: white;">
                    <option value="">-- Select Tag --</option>
                    <option value="monthly">Monthly</option>
                    <option value="rent">Rent</option>
                    <option value="groceries">Groceries</option>
                    <option value="salary">Salary</option>
                </select>
            </div>
        </div>

        <!-- Submit Button -->
        <div style="text-align: center; margin-top: 1.5rem;">
            <button type="submit" style="background: linear-gradient(135deg, #4e73df, #6f42c1); color: white; padding: 0.75rem 2rem; border: none; border-radius: 6px; font-size: 1rem; font-weight: 500; cursor: pointer; transition: background-color 0.3s; width: 100%; max-width: 200px;">
                Submit
            </button>
        </div>
    </EditForm>
</div>

@if (isMessageVisible)
{
        <div style="position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(0, 0, 0, 0.5); display: flex; align-items: center; justify-content: center; z-index: 1000;">
            <div style="background: white; padding: 2rem; border-radius: 12px; max-width: 500px; width: 90%; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                <h3 style="color: #2c3e50; font-size: 20px; margin-bottom: 1rem; font-weight: 600;">@messageTitle</h3>
                <p style="color: #4a5568; margin-bottom: 1.5rem;">@messageContent</p>
                <button @onclick="CloseMessageBox" style="background-color: #4299e1; color: white; padding: 0.5rem 1rem; border: none; border-radius: 6px; font-size: 0.875rem; cursor: pointer; transition: background-color 0.2s; float: right;">Close</button>
            </div>
        </div>
}

@code {
    private Transactions transaction = new Transactions
        {
            Date = DateTime.Today // Correctly initialize Date here
        };

    private string tagsInput = string.Empty;
    private string selectedTag = string.Empty;
    private string messageTitle = string.Empty;
    private string messageContent = string.Empty;
    private bool isMessageVisible = false;

    // Add tags to the transaction
    private void AddTagsToTransaction()
    {
        var newTags = tagsInput.Split(',')
            .Select(tag => tag.Trim())
            .Where(tag => !string.IsNullOrEmpty(tag))
            .ToList();

        if (!string.IsNullOrEmpty(selectedTag) && !transaction.Tags.Contains(selectedTag))
        {
            newTags.Add(selectedTag);
        }

        transaction.Tags = newTags.Distinct().ToList();
    }

    // Handle form submission
    private async Task HandleSubmit()
    {
        try
        {
            // Get logged-in user's details
            var loggedInUser = UserServices.GetLoggedInUser();
            if (loggedInUser == null)
            {
                throw new InvalidOperationException("User is not logged in.");
            }

            // Add the UserName to the transaction
            transaction.UserName = loggedInUser.UserName;

            // Ensure category is set
            if (transaction.Category == null)
            {
                transaction.Category = transaction.Amount > 0 ? "credit" : "debit";
            }

            // Set default values if any
            transaction.TransactionType = transaction.Category;
            transaction.Id = Guid.NewGuid().ToString(); // Generate unique transaction ID
            AddTagsToTransaction(); // Add tags

            // Call service to add the transaction
            await TransactionService.AddTransactionAsync(transaction);

            // Success message
            messageTitle = "Success!";
            messageContent = "Transaction added successfully.";
            isMessageVisible = true;

            // Reset form
            transaction = new Transactions { Date = DateTime.Today };
            tagsInput = string.Empty;
        }
        catch (Exception ex)
        {
            // Error message
            messageTitle = "Error";
            messageContent = $"Something went wrong: {ex.Message}";
            isMessageVisible = true;
        }
    }

    // Close message box and redirect to dashboard
    private void CloseMessageBox()
    {
        isMessageVisible = false;
        Navigation.NavigateTo("/dashboard"); // Redirect to the dashboard
    }
}
