@page "/add-debt"
@inject NavigationManager Navigation
@using TrackMyExpenses.Model
@using TrackMyExpenses.Services
@inject UserServices UserServices

<div class="flex justify-center items-center min-h-screen bg-gradient-to-b from-blue-200 via-purple-200 to-gray-100">
    <div class="w-full max-w-lg bg-white p-8 rounded-lg shadow-lg">
        <h2 class="text-2xl font-bold text-center text-gradient bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-purple-600 mb-6">Add Debt</h2>

        @if (errorMessage != null)
        {
            <div class="bg-red-100 text-red-700 p-4 rounded mb-4">
                <p>@errorMessage</p>
            </div>
        }

        <EditForm Model="@debt" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-4">
                <label for="Source" class="block text-sm font-medium text-gray-700">Debt Source:</label>
                <InputText id="Source" @bind-Value="debt.Source" class="block w-full mt-1 border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500" />
            </div>

            <div class="mb-4">
                <label for="Amount" class="block text-sm font-medium text-gray-700">Amount:</label>
                <InputNumber id="Amount" @bind-Value="debt.Amount" class="block w-full mt-1 border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500" />
                <span class="text-sm text-gray-500">@UserServices.GetPreferredCurrency()</span>
            </div>

            <div class="mb-4">
                <label for="DueDate" class="block text-sm font-medium text-gray-700">Due Date:</label>
                <InputDate id="DueDate" @bind-Value="debt.DueDate" class="block w-full mt-1 border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500" />
            </div>

            <div class="mb-4">
                <label for="Notes" class="block text-sm font-medium text-gray-700">Notes (Optional):</label>
                <InputTextArea id="Notes" @bind-Value="debt.Notes" class="block w-full mt-1 border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500" rows="4" />
            </div>

            <div class="mb-4">
                <label for="Tags" class="block text-sm font-medium text-gray-700">Tags (Optional):</label>
                <InputText id="Tags" @bind-Value="debt.Tags" class="block w-full mt-1 border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500" />
            </div>

            <div class="text-center">
                <button type="submit" class="w-full py-3 text-white font-bold rounded-lg bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 shadow-lg">
                    Add Debt
                </button>
            </div>
        </EditForm>

        @if (isMessageVisible)
        {
            <div class="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
                <div class="bg-white p-6 rounded-lg shadow-lg">
                    <h5 class="text-xl font-bold mb-4">@messageTitle</h5>
                    <p>@messageContent</p>
                    <button class="mt-4 px-6 py-2 bg-gradient-to-r from-blue-500 to-purple-600 text-white font-bold rounded-lg" @onclick="CloseMessageBox">Close</button>
                </div>
            </div>
        }
    </div>
</div>

<style>
    .text-gradient {
        background: linear-gradient(to right, #3b82f6, #8b5cf6);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
</style>

@code {
    private Debt debt = new Debt()
        {
            DueDate = DateTime.Today
        };
    private string? errorMessage;
    private string messageTitle = string.Empty;
    private string messageContent = string.Empty;
    private bool isMessageVisible = false;

    private async Task HandleSubmit()
    {
        try
        {
            var loggedInUser = UserServices.GetLoggedInUser();
            if (loggedInUser == null)
            {
                throw new InvalidOperationException("User is not logged in.");
            }

            debt.UserName = loggedInUser.UserName;

            var debtService = new DebtService();
            await debtService.AddDebtAsync(debt);

            messageTitle = "Success";
            messageContent = "Debt added successfully!";
            isMessageVisible = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while adding debt: {ex.Message}";
        }
    }

    private void CloseMessageBox()
    {
        isMessageVisible = false;
        Navigation.NavigateTo("/debt-payment");
    }
}
