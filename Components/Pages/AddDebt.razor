@page "/add-debt"
@inject NavigationManager Navigation
@using TrackMyExpenses.Model
@using TrackMyExpenses.Services
@inject UserServices UserServices

<div class="container-fluid py-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-lg border-0 rounded">
                <div class="card-header text-center bg-gradient-primary text-white py-4 rounded-top">
                    <h2 class="mb-0">Add Debt</h2>
                </div>
                <div class="card-body p-4">
                    @if (errorMessage != null)
                    {
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    }

                    <EditForm Model="@debt" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label for="Source" class="form-label">Debt Source:</label>
                            <InputText id="Source" @bind-Value="debt.Source" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label for="Amount" class="form-label">Amount:</label>
                            <InputNumber id="Amount" @bind-Value="debt.Amount" class="form-control" />
                            <span class="form-text text-muted">@UserServices.GetPreferredCurrency()</span>
                        </div>

                        <div class="mb-3">
                            <label for="DueDate" class="form-label">Due Date:</label>
                            <InputDate id="DueDate" @bind-Value="debt.DueDate" class="form-control" />
                        </div>

                        <div class="mb-3">
                            <label for="Notes" class="form-label">Notes (Optional):</label>
                            <InputTextArea id="Notes" @bind-Value="debt.Notes" class="form-control" rows="4" />
                        </div>

                        <div class="mb-3">
                            <label for="Tags" class="form-label">Tags (Optional):</label>
                            <InputText id="Tags" @bind-Value="debt.Tags" class="form-control" />
                        </div>

                        <div class="text-center">
                            <button type="submit" class="btn btn-gradient-primary px-5 py-2 rounded-pill text-white">
                                Add Debt
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@if (isMessageVisible)
{
    <div class="modal-backdrop show"></div>
    <div class="modal d-block" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-gradient-primary text-white">
                    <h5 class="modal-title">@messageTitle</h5>
                </div>
                <div class="modal-body">
                    <p>@messageContent</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-gradient-primary" @onclick="CloseMessageBox">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .bg-gradient-primary {
        background: linear-gradient(90deg, #6a11cb 0%, #2575fc 100%);
    }

    .btn-gradient-primary {
        background: linear-gradient(90deg, #6a11cb 0%, #2575fc 100%);
        border: none;
        transition: background 0.3s ease, transform 0.2s ease;
    }

        .btn-gradient-primary:hover {
            background: linear-gradient(90deg, #2575fc 0%, #6a11cb 100%);
            transform: scale(1.05);
        }

    .card {
        background: #ffffff;
        border-radius: 12px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .form-control {
        border-radius: 8px;
        border: 1px solid #dcdcdc;
        padding: 10px;
        font-size: 1rem;
    }

    .modal-content {
        border-radius: 12px;
    }
</style>

@code {
    private Debt debt = new Debt()
        {
            DueDate = DateTime.Today
        };
    private string? errorMessage;
    private string messageTitle = string.Empty;
    private string messageContent = string.Empty;
    private bool isMessageVisible = false;

    private async Task HandleSubmit()
    {
        try
        {
            var loggedInUser = UserServices.GetLoggedInUser();
            if (loggedInUser == null)
            {
                throw new InvalidOperationException("User is not logged in.");
            }

            debt.UserName = loggedInUser.UserName;

            var debtService = new DebtService();
            await debtService.AddDebtAsync(debt);

            messageTitle = "Success";
            messageContent = "Debt added successfully!";
            isMessageVisible = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while adding debt: {ex.Message}";
        }
    }

    private void CloseMessageBox()
    {
        isMessageVisible = false;
    }
}
